#!/bin/bash

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source required libraries
source "${SCRIPT_DIR}/lib/config.sh"
source "${SCRIPT_DIR}/lib/network.sh"
source "${SCRIPT_DIR}/lib/display.sh"

# Show usage information
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] [<network_address>/<subnet_mask>]
Scan a network range and display IP status.
If no network address is specified, the default gateway's network will be scanned.

Options:
  --inactive, -i   Show only inactive (unused) IP addresses
  --active, -a     Show only active (in-use) IP addresses
  --all, -l        Show all IP addresses (default)

Examples:
  $0                      # Scan default gateway's network
  $0 192.168.1.0/24      # Scan specific network
  $0 --inactive 10.0.0.0/16
  $0 -a 172.16.0.0/20
EOF
    exit 1
}

# Main function
main() {
    local network=""
    local filter="all"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --inactive|-i) filter="inactive" ;;
            --active|-a) filter="active" ;;
            --all|-l) filter="all" ;;
            */*)
                if [[ -z $network ]]; then
                    network=$1
                else
                    echo "Error: Multiple network addresses specified."
                    show_usage
                fi
                ;;
            *)
                if [[ -n $1 ]]; then
                    echo "Error: Unknown option '$1'"
                    show_usage
                fi
                ;;
        esac
        shift
    done
    
    # If no network specified, use default gateway's network
    if [[ -z $network ]]; then
        network=$(get_default_network)
        echo "No network specified. Using default network: $network"
    fi
    
    # Extract network address and subnet mask
    IFS='/' read -r ip_address subnet_mask <<< "$network"
    
    # Validate inputs
    if ! is_valid_ip "$ip_address"; then
        echo "Error: Invalid IP address '$ip_address'"
        exit 1
    fi
    
    if ! is_valid_subnet "$subnet_mask"; then
        echo "Error: Invalid subnet mask '$subnet_mask'"
        exit 1
    fi
    
    # Calculate network range
    local ip_decimal=$(ip_to_decimal "$ip_address")
    local mask=$((0xffffffff << (32 - subnet_mask)))
    local network_start=$((ip_decimal & mask))
    local network_end=$((network_start | ~mask & 0xffffffff))
    
    # Create temporary file for results
    results_file=$(mktemp)
    
    echo "Scanning network $network..."
    scan_network "$network_start" "$network_end" "$subnet_mask" "$results_file"
    
    # Sort results
    sort -V "$results_file" > "${results_file}.sorted"
    mv "${results_file}.sorted" "$results_file"
    
    # Display results
    display_results "$filter" "$results_file"
    
    # Cleanup
    rm "$results_file"
}

# Execute main function
main "$@"
